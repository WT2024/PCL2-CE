name: Update Release Discussion

on:
  workflow_dispatch:

jobs:
  update-discussion:
    runs-on: ubuntu-latest
    permissions:
      discussions: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release info
        id: get_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_json=$(gh release view --json name,body)
          release_name=$(echo "$release_json" | jq -r '.name')
          release_body=$(echo "$release_json" | jq -r '.body')
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$release_body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get Discussion Category ID
        id: get_category
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          category_query='{repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {discussionCategories(first: 10) {nodes {id name}}}}'
          category_id=$(gh api graphql -f query="$category_query" | jq -r '.data.repository.discussionCategories.nodes[] | select(.name == "更新日志") | .id')
          if [ -z "$category_id" ]; then
            echo "Error: Discussion category not found"
            exit 1
          fi
          echo "category_id=$category_id" >> $GITHUB_OUTPUT

      - name: Find or create discussion
        id: find_discussion
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_NAME: ${{ steps.get_release.outputs.release_name }}
          RELEASE_BODY: ${{ steps.get_release.outputs.release_body }}
          CATEGORY_ID: ${{ steps.get_category.outputs.category_id }}
        run: |
          find_query='{repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {discussions(first: 20, categoryId: "$CATEGORY_ID", orderBy: {field: UPDATED_AT, direction: DESC}) {nodes {id title}}}}'
          discussion_id=$(gh api graphql -f query="$find_query" | jq -r --arg title "$RELEASE_NAME" '.data.repository.discussions.nodes[] | select(.title == $title) | .id')
          if [ -z "$discussion_id" ]; then
            create_mutation='mutation {createDiscussion(input: {repositoryId: "${{ github.repository_id }}", title: "$RELEASE_NAME", body: "$RELEASE_BODY", categoryId: "$CATEGORY_ID"}) {discussion {id}}}'
            discussion_id=$(gh api graphql -f query="$create_mutation" | jq -r '.data.createDiscussion.discussion.id')
          fi
          if [ -z "$discussion_id" ]; then
            echo "Error: Failed to create discussion"
            exit 1
          fi
          echo "discussion_id=$discussion_id" >> $GITHUB_OUTPUT

      - name: Update discussion body
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISCUSSION_ID: ${{ steps.find_discussion.outputs.discussion_id }}
          RELEASE_BODY: ${{ steps.get_release.outputs.release_body }}
        run: |
          update_mutation='mutation {updateDiscussion(input: {discussionId: "$DISCUSSION_ID", body: "$RELEASE_BODY"}) {discussion {id title}}}'
          gh api graphql -f query="$update_mutation"